{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "23014a7e-4fbd-499f-ae60-85006288c08c",
      "metadata": {
        "ExecuteTime": {
          "end_time": "2023-11-22T13:49:15.712137+00:00",
          "start_time": "2023-11-22T13:49:15.557716+00:00"
        },
        "noteable": {},
        "id": "23014a7e-4fbd-499f-ae60-85006288c08c"
      },
      "outputs": [],
      "source": [
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8b8d34bb-ea45-46e1-8cbd-afa52f39c03e",
      "metadata": {
        "ExecuteTime": {
          "end_time": "2023-11-22T13:52:50.337427+00:00",
          "start_time": "2023-11-22T13:52:50.180646+00:00"
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "noteable": {
          "cell_type": "code"
        },
        "id": "8b8d34bb-ea45-46e1-8cbd-afa52f39c03e"
      },
      "outputs": [],
      "source": [
        "# Requirements\n",
        "a=np.array([1,2,3,4])\n",
        "b=np.array([5,6,7,8])\n",
        "c=np.array([a,b])\n",
        "d=np.arange(1,28).reshape(3,3,3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f9c1bad4-67f2-4b58-afc3-7362ee4ecfd6",
      "metadata": {
        "id": "f9c1bad4-67f2-4b58-afc3-7362ee4ecfd6",
        "outputId": "034f7cf5-80c1-409a-c9d4-39e77cf93c94"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "1D [1 2 3 4] [5 6 7 8] \n",
            "\n",
            " 2D [[1 2 3 4]\n",
            " [5 6 7 8]] \n",
            "\n",
            " 3D [[[ 1  2  3]\n",
            "  [ 4  5  6]\n",
            "  [ 7  8  9]]\n",
            "\n",
            " [[10 11 12]\n",
            "  [13 14 15]\n",
            "  [16 17 18]]\n",
            "\n",
            " [[19 20 21]\n",
            "  [22 23 24]\n",
            "  [25 26 27]]]\n"
          ]
        }
      ],
      "source": [
        "print(\"1D\",a,b,\"\\n\\n\",\"2D\",c,\"\\n\\n\",\"3D\",d)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "006b31ec-689e-4fe4-8519-22343043ea29",
      "metadata": {
        "id": "006b31ec-689e-4fe4-8519-22343043ea29",
        "outputId": "715c03a6-0589-4d75-995d-1a9d172c2491"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[ 6  8 10 12]\n"
          ]
        }
      ],
      "source": [
        "# Given are 2 similar dimensional numpy arrays, how to get a numpy array output in which every element is an element-wise sum of the 2 numpy arrays?\n",
        "print(a+b)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "926f9099-30c9-412d-8a2b-da5f144382c0",
      "metadata": {
        "id": "926f9099-30c9-412d-8a2b-da5f144382c0",
        "outputId": "5c5103c9-913a-447d-bf42-6749cace20f7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[2 4 6 8]\n"
          ]
        }
      ],
      "source": [
        "# Given a numpy array (matrix), how to get a numpy array output which is equal to the original matrix multiplied by a scalar?\n",
        "print(a*2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "40c05836-ce8a-4be7-9f2d-57233e6325bd",
      "metadata": {
        "ExecuteTime": {
          "end_time": "2023-11-22T13:56:29.198832+00:00",
          "start_time": "2023-11-22T13:56:29.043737+00:00"
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "noteable": {
          "cell_type": "code"
        },
        "id": "40c05836-ce8a-4be7-9f2d-57233e6325bd",
        "outputId": "02161725-0cc7-4a08-88e8-d4a022c1359e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[1. 0. 0. 0.]\n",
            " [0. 1. 0. 0.]\n",
            " [0. 0. 1. 0.]\n",
            " [0. 0. 0. 1.]]\n"
          ]
        }
      ],
      "source": [
        "# Create an identity matrix of dimension 4-by-4.\n",
        "eye=np.eye(4)\n",
        "print(eye)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4ffb6fb4-14ae-4f0f-859a-69ca23bf253e",
      "metadata": {
        "id": "4ffb6fb4-14ae-4f0f-859a-69ca23bf253e",
        "outputId": "09ed7479-bda0-4647-bc1a-e487475183df"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n",
            " 25 26 27]\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "array([[[ 1,  2,  3],\n",
              "        [ 4,  5,  6],\n",
              "        [ 7,  8,  9]],\n",
              "\n",
              "       [[10, 11, 12],\n",
              "        [13, 14, 15],\n",
              "        [16, 17, 18]],\n",
              "\n",
              "       [[19, 20, 21],\n",
              "        [22, 23, 24],\n",
              "        [25, 26, 27]]])"
            ]
          },
          "execution_count": 40,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Convert 1D array to 3D.\n",
        "I=np.arange(1,28)\n",
        "print(I)\n",
        "I.reshape(3,3,3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "18b12a3c-3813-4420-93b3-865b480b6f6f",
      "metadata": {
        "ExecuteTime": {
          "end_time": "2023-11-22T14:05:31.797581+00:00",
          "start_time": "2023-11-22T14:05:31.641552+00:00"
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "noteable": {
          "cell_type": "code"
        },
        "id": "18b12a3c-3813-4420-93b3-865b480b6f6f",
        "outputId": "4dfe785f-c890-49a2-c0fe-e843646a63ce"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[[1 1 1]\n",
            "  [1 1 1]\n",
            "  [1 1 1]]\n",
            "\n",
            " [[1 1 1]\n",
            "  [1 1 1]\n",
            "  [1 1 1]]\n",
            "\n",
            " [[1 1 1]\n",
            "  [1 1 1]\n",
            "  [1 1 1]]]\n"
          ]
        }
      ],
      "source": [
        "# Converting elements of array from float to integer.\n",
        "float=np.ones((3,3,3),dtype=\"int\")\n",
        "print(float)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bd5d03fe-f943-4681-8109-867a5964c719",
      "metadata": {
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "noteable": {
          "cell_type": "code"
        },
        "id": "bd5d03fe-f943-4681-8109-867a5964c719",
        "outputId": "b9252ce0-b14d-44b4-f9c6-c478742abca3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[  0   5  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85\n",
            "  90  95 100]\n"
          ]
        }
      ],
      "source": [
        "# Output a sequence of equally gapped 5 no from (0 to 100),(both inclusive).\n",
        "gapped=np.arange(0,105,5)\n",
        "print(gapped)"
      ]
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python3"
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.3"
    },
    "noteable": {
      "last_delta_id": "87408681-2fe9-4867-b6d5-9bf46a89e478"
    },
    "nteract": {
      "version": "noteable@2.9.0"
    },
    "selected_hardware_size": "small",
    "colab": {
      "provenance": [],
      "toc_visible": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}